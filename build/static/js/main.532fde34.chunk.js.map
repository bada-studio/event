{"version":3,"sources":["js/scatterBridge.js","js/app.js","index.js"],"names":["ScatterBridge","network","appName","Object","classCallCheck","this","ScatterJS","plugins","ScatterEOS","scatter","rpc","JsonRpc","concat","protocol","host","port","currentAccount","reqFields","accounts","eosApi","eos","Api","isConnected","connect","getIdentity","identity","find","x","blockchain","actions","length","transact","blocksBehind","expireSeconds","contract","actionName","data","perm","arguments","undefined","authority","account","name","authorization","actor","permission","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","scatterBridge","chainId","onClick","bind","assertThisInitialized","setState","react_default","a","createElement","className","Component","ReactDOM","render","js_app","document","getElementById"],"mappings":"wQAIqBA,aAEjB,SAAAA,EAAYC,EAASC,GAAUC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAC3BK,KAAKH,QAAUA,EACfI,IAAUC,QAAQ,IAAIC,KACtBH,KAAKI,QAAUH,IAAUG,QACzBJ,KAAKJ,QAAUA,EACf,IAAMS,EAAM,IAAIC,UAAJ,GAAAC,OAAeX,EAAQY,SAAvB,OAAAD,OAAqCX,EAAQa,KAA7C,KAAAF,OAAqDX,EAAQc,OACzEV,KAAKW,eAAiB,KACtBX,KAAKY,UAAY,CAAEC,SAAU,CAACjB,IAC9BI,KAAKc,OAASd,KAAKI,QAAQW,IAAInB,EAASoB,MAAK,CAACX,QAC9CL,KAAKiB,aAAc,gLAOMjB,KAAKI,QAAQc,QAAQlB,KAAKH,gBAAnDG,KAAKiB,uQAIFjB,KAAKiB,4CACEjB,KAAKI,QAAQe,YAAYnB,KAAKY,kBACpCZ,KAAKW,eAAiBX,KAAKI,QAAQgB,SAASP,SAASQ,KAAK,SAAAC,GAAC,MAAqB,QAAjBA,EAAEC,sLAI5DC,uEACNA,EAAQC,uCACDzB,KAAKc,OAAOY,SAAS,CACvBF,QAASA,GACV,CAACG,aAAc,EAAGC,cAAe,8IAI9BhC,GACV,IAAMS,EAAM,IAAIC,UAAJ,GAAAC,OAAeX,EAAQY,SAAvB,OAAAD,OAAqCX,EAAQa,KAA7C,KAAAF,OAAqDX,EAAQc,OACzEV,KAAKc,OAASd,KAAKI,QAAQW,IAAInB,EAASoB,MAAK,CAACX,2CAGvCwB,EAAUC,EAAYC,GAA4C,IAAtCC,EAAsCC,UAAAR,OAAA,QAAAS,IAAAD,UAAA,GAAAA,UAAA,GAA/BjC,KAAKW,eAAewB,UAC9D,MAAO,CACHC,QAASP,EACTQ,KAAMP,EACNQ,cAAe,CAAC,CACZC,MAAOvC,KAAKW,eAAe0B,KAC3BG,WAAYR,IAEhBD,KAAMA,YCTHU,cAvCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA7C,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IACjBE,EAAA7C,OAAA8C,EAAA,EAAA9C,CAAAE,KAAAF,OAAA+C,EAAA,EAAA/C,CAAA2C,GAAAK,KAAA9C,KAAM0C,KAEDK,MAAQ,CACXC,cAAe,KACfpD,QAAS,CACP2B,WAAY,MACZf,SAAU,QACVC,KAAM,iBACNC,KAAM,IACNuC,QAAS,qEAIbN,EAAKO,QAAUP,EAAKO,QAAQC,KAAbrD,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAA6C,KAdEA,oFAkBjB3C,KAAKqD,SAAS,CACZL,cAAe,IAAIrD,EAAcK,KAAK+C,MAAMnD,QAAS,0LAKjDI,KAAK+C,MAAMC,cAAc9B,iCACzBlB,KAAK+C,MAAMC,cAAc7B,iJAI/B,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,UAAQN,QAASlD,KAAKkD,SAAtB,iBAjCQQ,aCClBC,IAASC,OAAON,EAAAC,EAAAC,cAACK,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.532fde34.chunk.js","sourcesContent":["import ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nexport default class ScatterBridge {\n\n    constructor(network, appName) {\n        this.appName = appName;\n        ScatterJS.plugins(new ScatterEOS());\n        this.scatter = ScatterJS.scatter;\n        this.network = network;\n        const rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`);\n        this.currentAccount = null;\n        this.reqFields = { accounts: [network] };\n        this.eosApi = this.scatter.eos(network, Api, {rpc});\n        this.isConnected = false;\n\n        //window.ScatterJS = null;\n        //window.ScatterEOS = null;\n    }\n\n    async connect() {\n        this.isConnected = await this.scatter.connect(this.appName);\n    }\n\n    async getIdentity() {\n        if(this.isConnected) {\n            await this.scatter.getIdentity(this.reqFields);\n            this.currentAccount = this.scatter.identity.accounts.find(x => x.blockchain === \"eos\");\n        }\n    }\n\n    async sendTx(actions) {\n        if(actions.length) {\n            await this.eosApi.transact({\n                actions: actions\n            }, {blocksBehind: 3, expireSeconds: 30 });\n        }\n    }\n\n    updateNetwork(network) {\n        const rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`);\n        this.eosApi = this.scatter.eos(network, Api, {rpc});\n    }\n\n    makeAction(contract, actionName, data, perm = this.currentAccount.authority) {\n        return {\n            account: contract,\n            name: actionName,\n            authorization: [{\n                actor: this.currentAccount.name,\n                permission: perm// this.currentAccount.authority\n            }],\n            data: data\n        };\n    }\n}","import React, { Component } from \"react\";\nimport \"../css/app.css\";\nimport ScatterBridge from \"./scatterBridge\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      scatterBridge: null,\n      network: {\n        blockchain: \"eos\",\n        protocol: \"https\",\n        host: \"api.eoseoul.io\",\n        port: 443,\n        chainId: \"b7fc36d8e5891d9fea7d49df06221b3ac89c793f14e7dacd16a332ce8094d049\"\n      }\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      scatterBridge: new ScatterBridge(this.state.network, \"EOS Knight Event\")\n    });\n  }\n\n  async componentDidMount() {\n    await this.state.scatterBridge.connect();\n    await this.state.scatterBridge.getIdentity();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <button onClick={this.onClick}>Test</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}